/*
 * Copyright (c) 2023, Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef PSA_CRYPTO_DRIVER_CONFIG_H
#define PSA_CRYPTO_DRIVER_CONFIG_H

#if defined(PSA_CRYPTO_DRIVER_GENERATE_RANDOM_CC3XX)
#define PSA_ACCEL_RANDOM 1
#endif

/* We always provide entropy through cc3xx_platform. */
#define PSA_ACCEL_ENTROPY 1

// TODO: CC310 does not have AES 192 / 256 key size
#if defined(PSA_CRYPTO_DRIVER_ALG_CBC_NO_PADDING_CC3XX)
#define PSA_ACCEL_AES128_CBC_NO_PADDING 1
#define PSA_ACCEL_AES192_CBC_NO_PADDING 1
#define PSA_ACCEL_AES256_CBC_NO_PADDING 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_CBC_PKCS7_CC3XX)
#define PSA_ACCEL_AES128_CBC_PKCS7 1
#define PSA_ACCEL_AES192_CBC_PKCS7 1
#define PSA_ACCEL_AES256_CBC_PKCS7 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_CCM_CC3XX)
#define PSA_ACCEL_AES128_CCM 1
#define PSA_ACCEL_AES192_CCM 1
#define PSA_ACCEL_AES256_CCM 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_CFB_CC3XX)
#define PSA_ACCEL_AES128_CFB 1
#define PSA_ACCEL_AES192_CFB 1
#define PSA_ACCEL_AES256_CFB 1

#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_CHACHA20_POLY1305_CC3XX)
#define PSA_ACCEL_CHACHA20_POLY1305
#endif

// NO CHACHA20 acceleration?
// #define PSA_ACCEL_CHACHA20 1

#if defined(PSA_CRYPTO_DRIVER_ALG_CMAC_CC3XX)
#define PSA_ACCEL_AES128_CMAC 1
#define PSA_ACCEL_AES192_CMAC 1
#define PSA_ACCEL_AES256_CMAC 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_CTR_CC3XX)
#define PSA_ACCEL_AES128_CTR 1
#define PSA_ACCEL_AES192_CTR 1
#define PSA_ACCEL_AES256_CTR 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_DETERMINISTIC_ECDSA_CC3XX)
#define PSA_ACCEL_ECDSA_P224_SHA224 1
#define PSA_ACCEL_ECDSA_P224_SHA256 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_ECB_NO_PADDING_CC3XX)
#define PSA_ACCEL_AES128_ECB_NO_PADDING 1
#define PSA_ACCEL_AES192_ECB_NO_PADDING 1
#define PSA_ACCEL_AES256_ECB_NO_PADDING 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_ECDH_CC3XX)
#define PSA_ACCEL_ECDH_P224 1
#define PSA_ACCEL_ECDH_P256 1
#define PSA_ACCEL_ECDH_X25519 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_ECDSA_CC3XX)
#define PSA_ACCEL_ECDSA_P224_SHA224 1
#define PSA_ACCEL_ECDSA_P224_SHA256 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_GCM_CC3XX)
#define PSA_ACCEL_AES128_GCM 1
#define PSA_ACCEL_AES192_GCM 1
#define PSA_ACCEL_AES256_GCM 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_HKDF_CC3XX)
// TODO: Which ones do we support?
// #define PSA_ACCEL_HKDF_SHA1 1
// #define PSA_ACCEL_HKDF_SHA224 1
// #define PSA_ACCEL_HKDF_SHA256 1
// #define PSA_ACCEL_HKDF_SHA384 1
// #define PSA_ACCEL_HKDF_SHA512 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_HMAC_CC3XX)
#define PSA_ACCEL_HMAC_SHA1 1
#define PSA_ACCEL_HMAC_SHA224 1
#define PSA_ACCEL_HMAC_SHA256 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_RSA_OAEP_CC3XX)
#define PSA_ACCEL_RSA1024_SHA224_OAEP 1
#define PSA_ACCEL_RSA1024_SHA256_OAEP 1
#define PSA_ACCEL_RSA2048_SHA224_OAEP 1
#define PSA_ACCEL_RSA2048_SHA256_OAEP 1
#define PSA_ACCEL_RSA3072_SHA224_OAEP 1
#define PSA_ACCEL_RSA3072_SHA256_OAEP 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_RSA_PKCS1V15_CRYPT_CC3XX)
#define PSA_ACCEL_RSA1024_PKCS1V15_CRYPT 1
#define PSA_ACCEL_RSA2048_PKCS1V15_CRYPT 1
#define PSA_ACCEL_RSA3072_PKCS1V15_CRYPT 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_RSA_PKCS1V15_SIGN_CC3XX)
#define PSA_ACCEL_RSA1024_SHA224_PKCS1V15_SIGN 1
#define PSA_ACCEL_RSA1024_SHA256_PKCS1V15_SIGN 1
#define PSA_ACCEL_RSA2048_SHA224_PKCS1V15_SIGN 1
#define PSA_ACCEL_RSA2048_SHA256_PKCS1V15_SIGN 1
#define PSA_ACCEL_RSA3072_SHA224_PKCS1V15_SIGN 1
#define PSA_ACCEL_RSA3072_SHA256_PKCS1V15_SIGN 1
#endif

// TODO: no PSS acceleration?
// #define PSA_ACCEL_RSA1024_SHA224_PSS 1
// #define PSA_ACCEL_RSA1024_SHA256_PSS 1
// #define PSA_ACCEL_RSA2048_SHA224_PSS 1
// #define PSA_ACCEL_RSA2048_SHA256_PSS 1
// #define PSA_ACCEL_RSA3072_SHA224_PSS 1
// #define PSA_ACCEL_RSA3072_SHA256_PSS 1


#if defined(PSA_CRYPTO_DRIVER_ALG_SHA_1_CC3XX)
#define PSA_ACCEL_SHA1 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_SHA_224_CC3XX)
#define PSA_ACCEL_SHA224 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ALG_SHA_256_CC3XX)
#define PSA_ACCEL_SHA256 1
#endif

// TODO: no KEY PAIR acceleration?
#define PSA_ACCEL_KEY_PAIR_P224 1
#define PSA_ACCEL_KEY_PAIR_P256 1
#define PSA_ACCEL_KEY_PAIR_X25519 1

#if defined(PSA_CRYPTO_DRIVER_ALG_STREAM_CIPHER_CC3XX)
#define PSA_ACCEL_ALG_STREAM_CIPHER
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_BRAINPOOL_P_R1_256_CC3XX)
#define PSA_ACCEL_KEY_PAIR_PB256 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_MONTGOMERY_255_CC3XX)
#define PSA_ACCEL_ECDH_X25519 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_K1_192_CC3XX)
#define PSA_ACCEL_ECC_SECP_K1_192
#endif

// # PSA_CRYPTO_DRIVER_ECC_SECP_K1_224_CC3XX - Currently not supported

// TODO: these curves are used in multiple algs, check more for acceleration
#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_K1_256_CC3XX)
#define PSA_ACCEL_KEY_PAIR_K256 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_R1_192_CC3XX)
#define PSA_ACCEL_KEY_PAIR_R192 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_R1_224_CC3XX)
#define PSA_ACCEL_KEY_PAIR_R224 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_R1_256_CC3XX)
#define PSA_ACCEL_KEY_PAIR_R256 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_R1_384_CC3XX)
#define PSA_ACCEL_KEY_PAIR_R384 1
#endif

#if defined(PSA_CRYPTO_DRIVER_ECC_SECP_R1_521_CC3XX)
#define PSA_ACCEL_KEY_PAIR_R521 1
#endif

// # PSA_CRYPTO_DRIVER_ALG_XTS_CC3XX - Currently not supported

/* Forward random algorithm selection to Oberon config name */
#if defined(PSA_WANT_ALG_CTR_DRBG)
#define PSA_USE_CTR_DRBG_DRIVER                 1
#endif
#if defined(PSA_WANT_ALG_HMAC_DRBG)
#define PSA_USE_HMAC_DRBG_DRIVER                1
#endif

#endif /* PSA_CRYPTO_DRIVER_CONFIG_H */
